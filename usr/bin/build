#!/bin/bash

. /usr/lib/uhubuild/common
scrollout

# UHUBUILD környezetben a fordítást levezénylő szkript
#
# Az első verziót összeállította: Sári Gábor <saga@kde.hu>
# 2004. január 19. táján a II. UHU Csomagoló Party után
#
# A legfrissebb verzió elérhető a http://ubk.hu/ oldalról.
#
# A Changelog a csomag forrásában található
#
# Charlos <charlos1984@citromail.hu>
# Márkus Sándor <msandor@root.hu>
# Sári Gábor <sari.gabor@gmail.com>
# peritus <peritus@freemail.hu>
# Páder Rezső <rezso@rezso.net>

BUILD_VERSION="0.9.5"
VENDOR="UHU Linux Baráti Kör"
PACKAGER="UBK <ubk@ubk.hu>"

case `basename $0` in
	build)
		export UHUBUILD_DISTR=3;;
	build-2.2)
		export UHUBUILD_DISTR=2.2;;
	build-3)
		export UHUBUILD_DISTR=3;;
	build-dev)
		export UHUBUILD_DISTR=dev;;
esac

[ "$UID" != 0 ] && {
	redecho "A buildszkript csak root-ként futtatható!"
	exit 1
	}

export UHUBUILD_VAR=/var/uhubuild
export UHUBUILD_PATH=/usr/src/UHUBUILD
	# Az UHUBUILD_PATH az a könyvtár, amelyben
	# a fejlesztőkörnyezet megtalálható
export UHUBUILD_CCACHE_DIR=/var/cache/uhubuild/ccache/${UHUBUILD_DISTR}
# export UHUBUILD_CCACHE_DIR="$UHUBUILD_VAR"/ccache
	# A /root/ccache nem jó, mert az uhubuild
	# felhasználónak nincs joga a /root-hoz

if [ $# == 0 ]; then
	redecho "*******************************************"
	redecho "*** Nem adtál meg egy UB forrást sem!   ***"
	redecho "*** További információkért indítsd így: ***"
	redecho "*** build-${UHUBUILD_DISTR} -h          ***"
	redecho "*******************************************"
	exit 1
fi

[ -d "$UHUBUILD_PATH" ] || {
	# Nem létezik a Build környezet, létrehozzuk
	mkdir -p "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/logpack
	mkdir -p "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/tmp
	mkdir -p "$UHUBUILD_PATH"/patches-${UHUBUILD_DISTR}
	mkdir -p "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/ub
}

export UHUBUILD_COMPILESNAPSHOTDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile
export UHUBUILD_INSTALLSNAPSHOTDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install
export UB_UHUCHECK=1

for i in "$@"; do
	case $1 in
		-pv|--pack-version)
			yellowecho "Az UB környezet becsomagolása verziókövetéssel fog megtörténni."
			echo
			export UB_PACK_VERSION=1
			shift;;
		-ps|--pack-source)
			yellowecho "Az UB környezet becsomagolása a forrás(ok)kal fog megtörténni."
			echo
			export UB_PACK_SOURCE=1
			shift;;
		-cc|--create-contents)
			yellowecho "Contents.gz készítése a packages könyvtárban."
			echo
			export UB_CONTENTS=1
			shift;;
		-ns|--no-snapshot)
			yellowecho "Nem készül egy snapshot sem."
			echo
			export UHUBUILD_COMPILESNAPSHOTDIR=
			export UHUBUILD_INSTALLSNAPSHOTDIR=
			export UB_NOSNAPSHOT=1
			shift;;
		-ncs|--no-csnapshot)
			yellowecho "Nem készül compile snaphsot."
			echo
			export UHUBUILD_COMPILESNAPSHOTDIR=
			export UB_NOCSNAPSHOT=1
			shift;;
		-nis|--no-isnapshot)
			yellowecho "Nem készül install snaphsot."
			echo
			export UHUBUILD_INSTALLSNAPSHOTDIR=
			export UB_NOISNAPSHOT=1
			shift;;
		-rcs|--remove-csnapshot)
			yellowecho "Régebbi compile snapshot törlése."
			echo
			export UB_RM_CSNAPSHOT=1
			shift;;
		-ris|--remove-isnapshot)
			yellowecho "Régebbi install snapshot törlése."
			echo
			export UB_RM_ISNAPSHOT=1
			shift;;
		-rc|--remove-ccache)
			yellowecho "Régebbi ccache törlése."
			export UB_RM_CCACHE=1
			shift;;
		-rch|--remove-chrootdir)
			yellowecho "CHROOT környezet újra felépítése..."
			echo
			export UB_RM_CHROOTDIR=1
			shift;;
		-usc|--use-csnapshot)
			yellowecho "Compile snapshot használata."
			echo
			export UB_USE_SNAPSHOT=C
			shift;;
		-usi|--use--isnapshot)
			yellowecho "Install snapshot használata."
			echo		
			export UB_USE_SNAPSHOT=I
			shift;;
		-ch1|--chroot1)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot1
			shift;;
		-ch2|--chroot2)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot2
			shift;;
		-ch3|--chroot3)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot3
			shift;;
		-ch4|--chroot4)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot4
			shift;;
		-ch5|--chroot5)
			export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot5
			shift;;
		-nuch|--no-uhucheck)
			yellowecho "UHUBUILD-CHECK kihagyva."
			export UB_UHUCHECK=0
			shift;;
		-ner|--new-extrarelease)
			yellowecho "Extrarelease törlése."
			echo
			export UB_NEW_EXTRARELEASE=1
			shift;;
		-nr|--new-release)
			yellowecho "Release emelése."
			echo
			export UB_NEW_RELEASE=1
			shift;;
		-h|--help)
			scrollout
			appleecho "BUILDSZKRIPT ${BUILD_VERSION}":
			echo
			appleecho "HASZNÁLAT:"
			echo
			appleecho "build-${UHUBUILD_DISTR} $1 [-pv][-ps][-ns][-ncs][-nis][-rs][-rc][-ch1][-ch2][-ch3]"
			appleecho "[-ch4][-ch5][-rch][-nuch][-usc|-usi][-cc][-ner] csomag1 [csomag2] [csomag3] [...]"
			echo
			appleecho "vagy (posix kapcsolókkal):"
			appleecho "[--pack-version][--pack-source][--no-snapshot][--no-csnapshot][--no-isnapshot]"
			appleecho "[--remove-ccache][--remove-chrootdir][--chroot1-5][--no-uhubuild-check]"
			appleecho "[--use-csnapshot][--use-isnapshot][--create-contents][--new-extrarelease]"
 			echo
			appleecho "A csomag1 [csomag2] [csomag3] [...] UB források alapján az UHU csomagok elkészítése."
			echo
			appleecho "A megfelelően felépített és előkészített UB csomagoknak"
			appleecho "a következő könyvtár alatt kell elhelyezkedniük:"
			echo
			appleecho "$UHUBUILD_PATH/UB-${UHUBUILD_DISTR}/"
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			echo
			appleecho "Amennyiben valamelyik megadott csomag fordítása hiba miatt megszakad, azt a"
			appleecho "fordítás végén a $UHUBUILD_PATH/misc-${UHUBUILD_DISTR}/failed/ könyvtárban"
			appleecho "megjelenő, a csomag nevével azonos nevű fájl is jelzi."
			echo
			appleecho "Opcionálisan megadható kapcsolók jelentése:"
			appleecho "[-pv|--pack-version]:"
			appleecho "Az opcionálisan megadható '-pv' v. '--pack-version' kapcsoló hatására az UB"
			appleecho "csomagokról készülő 'backup' oly módon fog elkészülni, hogy annak neve"
			appleecho "tartalmazni fogja a csomag verziószámát is."
			appleecho "Példa:"
			echo
			appleecho "a '-pv|--pack-version' kapcsoló nélkül: 'csomag1.UB.tar.gz'"
			appleecho "a '-pv|--pack-version' kapcsolóval    : 'csomag1_\${version}-\${release}_UB.tar.gz'"
			echo
			appleecho "[-ps|--pack-source]:"
			appleecho "A becsomagolt UB forrás a 'source' mappát is tartalmazza."
			echo
			appleecho "[-ns|--no-snapshot]:"
			appleecho "Nem készülnek snapshot fájlok."
			echo
			appleecho "[-ncs|--no-csnapshot]:"
			appleecho "Nem készül compile snapshot fájl."
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			appleecho "[-nis|--no-isnapshot]:"
			appleecho "Nem készül install snapshot fájl."
			echo
			appleecho "[-rs|--remove-snapshot]:"
			appleecho "Törlődnek a régebbi, adott csomaghoz kapcsolódó snapshot fájlok."
			echo
			appleecho "[-rc|--remove-ccache]:"
			appleecho "Törlődik a régebbi, adott csomaghoz kapcsolódó ccache fájl."
			echo
			appleecho "[-ch1-5|--chroot1-5]:"
			appleecho "Megadjuk, mely chroot könvtárt használja az öt közül."
			appleecho "(${UHUBUILD_VAR}/${UHUBUILD_DISTR}/chroot[1-5]"
			echo
			appleecho "[-rch|--remove-chrootdir]:"
			appleecho "A kapcsoló hatására letörli a chroot környezetet, majd újra felépíti"
			appleecho "azt. Ha nem adunk meg -ch[1-5] kapcsolót, akkor az alapértelmezettként"
			appleecho "a chroot1-et törli."
			echo
			appleecho "[-usc|--use-csnapshot]:"
			appleecho "Az előző fordítás során készült compile snapshot fájl alapján indul újra a"
			appleecho "build folyamat."
			echo
			yellowecho "Nyomj egy ENTER-t a következő oldalhoz!"
			read
			echo
			appleecho "[-usi|--use-isnapshot]:"
			appleecho "Az előző fordítás során készült install snapshot fájl alapján indul újra a"
			appleecho "build folyamat."
			echo
			appleecho "[-cc|--create-contents]:"
			appleecho "Az adott verzió packages könyvtárában a build folyamat végén elkészül egy"
			appleecho "Contents.gz fájl is."
			echo
			appleecho "[-nuch|--no-uhucheck]:"
			appleecho "Nem ellenőrzi az UB forrás helyességét. (Csak saját felelősségre!)"
			echo
			appleecho "[-ner|--new-extrarelease]:"
			appleecho "Törli (azaz újból 1-re állítja) a csomag extrarelease értékét. Ez"
			appleecho "főleg akkor lehet hasznos, ha egy adott csomag legelső lefordítása"
			appleecho "nem sikerül elsőre. Így ha valamiért, (de nem feltétlenül hiba"
			appleecho "miatt) később újracsomagoljuk a programot, már ne használjuk ezt a"
			appleecho "kapcsolót!"
			echo			
			appleecho "[-h|--help|-?]:"
			appleecho "Ez az a képernyő. ;-)"
			echo
			appleecho "[-V|--version]:"
			appleecho "Kiírja a program verzió számát néhány egyéb információ kíséretében"
			exit 0;;
		-V|--version)
			appleecho "UHUBUILD környezetben a fordítást levezénylő szkript"
			yellowecho "$BUILD_VERSION"
			echo
			appleecho "Az első verziót összeállította: Sári Gábor <saga@kde.hu>"
			appleecho "2004. január 19. táján a II. UHU Csomagoló Party után"
			echo
			appleecho "A legfrissebb verzió elérhető a http://ubk.hu/ oldalról."
			exit 0;;
		esac
done

for i in "$@"; do
	if [ ! -d "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i" ]; then
		echo
		redecho "Nincs '$i' elnevezésű UB forrás!"
		# exit 1
		continue
	fi

ver=$(<"$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/version)
rel=$(<"$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/release)

function uzenet_var() {
for j in 9 8 7 6 5 4 3 2 1 0; do
	sleep 1  
	echo -n -e "\033[0G\033[44m\033[0m $j \033[m"
done
}

if [ "$UB_RM_CHROOTDIR" = "1" ]; then
		if [ "$UHUBUILD_CHROOTDIR" = "" ]; then
			export UHUBUILD_CHROOTDIR=""$UHUBUILD_VAR"/${UHUBUILD_DISTR}/chroot1"
			yellowecho "Mivel nem adtál meg chroot számot [1-5], ezért az alapértelmezett,"
			yellowecho "${UHUBUILD_CHROOTDIR}-t fogom törölni."
			echo
		fi
	yellowecho "${UHUBUILD_CHROOTDIR} törlése..."
	echo
	uzenet_var
	scrollout
	yellowecho "${UHUBUILD_CHROOTDIR} törlés alatt..."
	rm -rf "$UHUBUILD_CHROOTDIR"/*
	scrollout
fi

if [ "$UB_USE_SNAPSHOT" = "C" ]; then
	export UHUBUILD_SNAPSHOTFILE="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile/${1}_${ver}-${rel}_compiled.tar.gz
	export UB_USE_SNAPSHOT=1
fi

if [ "$UB_USE_SNAPSHOT" = "I" ]; then
	export UHUBUILD_SNAPSHOTFILE="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install/${1}_${ver}-${rel}_installed.tar.gz
	export UB_USE_SNAPSHOT=1
fi

if [ "$UB_USE_SNAPSHOT" = "1" ]; then
	[ -f "$UHUBUILD_SNAPSHOTFILE" ] || {
		# Nem létezik a szükséges snapshot fájl,
		# kilépés!

		redecho "Nem létezik a(z) ${UHUBUILD_SNAPSHOTFILE} fájl!"
		exit 1
	}
fi

export UHUBUILD_APT_SOURCES=/etc/apt/sources.list-build-${UHUBUILD_DISTR}

	# Az előbbi fájlban adjuk meg azokat az apt sorokat,
	# amelyekről letölthetőek a szükséges csomagok!
	# Amennyiben szükésgünk van az általunk készített
	# csomagokra is, adjuk meg pl. a következőt is:
	
	# deb file:/usr/src/UHUBUILD/packages-1.2 ./

[ -f "$UHUBUILD_APT_SOURCES" ] || {
	# Nem létezik a Build környezet,
	# kilépés!

	redecho "Nem létezik a $UHUBUILD_APT_SOURCES állomány!"
	exit 1
}

export UHUBUILD_LOGPACKDIR="$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/logpack

export UHUBUILD_RESULTDIR=$(mktemp -d "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/tmp/RESULT.XXXXXX)

	# Az eredményt majd egy ideiglenes könyvtár alá
	# rakjuk, mert így könnyebb lesz törölni a régi
	# változatokat a fordítás végén.

if [ -z "$UHUBUILD_CHROOTDIR" ]; then

	# Ez kívülről természetesen felülbírálható

	export UHUBUILD_CHROOTDIR="$UHUBUILD_VAR/${UHUBUILD_DISTR}/chroot1:\
	                          $UHUBUILD_VAR/${UHUBUILD_DISTR}/chroot2:\
	                          $UHUBUILD_VAR/${UHUBUILD_DISTR}/chroot3:\
				  $UHUBUILD_VAR/${UHUBUILD_DISTR}/chroot4:\
				  $UHUBUILD_VAR/${UHUBUILD_DISTR}/chroot5"
fi

trap 'rm -rf $UHUBUILD_RESULTDIR' EXIT

if [ $1 = -d ]; then
	# Ha van megadva '-d' kapcsoló, a paramétereket eggyel balra 'toljuk'
	# ennek köszönhetően a következő ciklus nem fogja megpróbálni a
	# '-d' csomagot lefordítani :-)

	shift
fi

# Az esetleg már létező lokális UHU csomagokhoz kapcsolódó
# Packages fájlok ismételt létrehozása

cd "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/
uhu-scanpkgs .

	if [ "$UB_UHUCHECK" = "1" ]; then
		cd "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/
		uhubuild-check "$i" || exit 1
	else
		echo
		uzenet_var			
	fi 
		
echo
yellowecho "A(z) '$i' csomag buildelése következik..."
echo
	# A maintainer az UBK Team
	if [ -f "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer ]; then
		if grep -q -v "$PACKAGER" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer; then
		sed -i -e "s/^.*$/$PACKAGER/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer
		fi
	else
	echo "$PACKAGER" > "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/maintainer
	fi
	
	# Közös vendor fájl használata
	if [ -f "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor ]; then
		if grep -q -v "$VENDOR" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor; then
		sed -i "s/^.*$/$VENDOR/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor
		fi
	else
	echo "$VENDOR" > "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/vendor
	fi

	if [ "$UB_RM_CCACHE" = "1" ]; then
	rm -f "$UHUBUILD_CCACHE_DIR"/${i}_ccache.tar.gz
	fi

	if [ "$UB_RM_CSNAPSHOT" = "1" ]; then
		if [ "$UB_NOSNAPSHOT" = "1" ]; then
			rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile/${i}_${ver}-${rel}_compiled.tar.gz
		else
			rm -f "$UHUBUILD_COMPILESNAPSHOTDIR"/misc-${UHUBUILD_DISTR}/snapshot/compile/${i}_${ver}_${rel}-compiled.tar.gz
		fi
	fi

	if [ "$UB_RM_ISNAPSHOT" = "1" ]; then
		if [ "$UB_NOSNAPSHOT" = "1" ]; then
			rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install/${i}_${ver}-${rel}_installed.tar.gz
		else
			rm -f "$UHUBUILD_COMPILESNAPSHOTDIR"/misc-${UHUBUILD_DISTR}/snapshot/install/${i}_${ver}-${rel}_installed.tar.gz
		fi
	fi

	if [ "$UB_NOCSNAPSHOT" = "1" ]; then
		if [ "$UB_NOISNAPSHOT" = "1" ]; then
			echo
			redecho "*******************************************"
			redecho "*** Használd inkább az '-ns' kapcsolót! ***"
			redecho "*******************************************"
			exit 1
		fi
	fi

	# Kiszedjük a forrásból a version és a release értékeket, ezek és az
	# eltárolt EXTRARELEASE alapján kiszámoljuk az új extrarelease értékét.

	if [ -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${i}_${ver}-${rel} ]; then
		extrarel=$(<"$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${i}_${ver}-${rel})
		extrarel=$((extrarel+1))
	else
		extrarel=1
	fi
	export UHUBUILD_EXTRARELEASE="$extrarel"

	if [ "$UB_NEW_EXTRARELEASE" = "1" ]; then
		rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${i}_${ver}-${rel}
	fi
		
	if [ "$UB_NEW_RELEASE" = "1" ]; then
		newrel=$((rel+1))
		sed -i "s/$rel/$newrel/g" "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i"/release
	fi

	# Vagy, egy másik megoldás, amelyik az aktuális
	# dátumot használja fel e célra:
	
	# export UHUBUILD_EXTRARELEASE=`date +'%Y%m%h%H%M%S'`

	# Hajrá, akkor innentől fordítunk...
	uhubuild-chrootbuild "$UHUBUILD_PATH"/UB-${UHUBUILD_DISTR}/"$i" || {

	# Hiba történt!
	# Ennek több csomag együttes fordítása esetén lesz haszna,
	# ha az egyik csomag buildelése hiba miatt megszakad, azt
	# a ...misc-1.2/failed/csomagneve fájl megjelenése jelzi
	# Ezeket a végén kiíratjuk a képernyőre
	touch "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/"$i"
	continue
	}

	# Siker.
	
	rm -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/"$i"
	echo $extrarel > "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/extrarelease/${i}_${ver}-${rel}

	# A kész csomagokat a packages-${UHUBUILD_DISTR}/ alá másoljuk,
	# de töröljük onnan a régebbi példányokat.

	for pkg in $(ls $UHUBUILD_RESULTDIR); do
		rm -f "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/${pkg%%_*}_*
	done
	cp -a $UHUBUILD_RESULTDIR/* "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/

	# A Packages és Packages.gz fájlok létrehozása a lokálisan
	# megtalálható új UHU csomagjaink alkalmazhatósága érdekében

	cd "$UHUBUILD_PATH"/packages-${UHUBUILD_DISTR}/

	if [ "$UB_CONTENTS" = "1" ]; then
		uhu-scanpkgs -c .
	else
		uhu-scanpkgs .
	fi

	# Ezek után a /etc/apt/sources.list-1.2 állományba
	# beírható pl. a következő sor:
	# deb file:/usr/src/UHUBUILD/packages-1.2 ./

	# Becsomagoljuk az UB környezetet, es elhelyezzük a packages-1.2/ub könyvtárban.

	cd $UHUBUILD_PATH/UB-${UHUBUILD_DISTR}/
	mkdir -p $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub

	if [ "$UB_PACK_VERSION" = "1" ]; then
		if [ "$UB_PACK_SOURCE" = "1" ]; then
			echo "${i}_${ver}-${rel}_ub.tar.gz létrehozása a $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub könyvtárba..."
			echo $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub/${i}_${ver}-${rel}_ub.tar.gz ${i} |\
				xargs tar --one-file-system -czf
		else
			echo "${i}_${ver}-${rel}_ub.tar.gz létrehozása a $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub könyvtárba..."
			echo $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub/${i}_${ver}-${rel}_ub.tar.gz ${i} |\
				xargs tar --exclude sources --one-file-system -czf
		fi
	else
		if [ "$UB_PACK_SOURCE" = "1" ]; then
			echo "${i}_ub.tar.gz létrehozása a $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub könyvtárba..."
			echo $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub/${i}_ub.tar.gz ${i} |\
				xargs tar --one-file-system -czf
		else
			echo "${i}_ub.tar.gz létrehozása a $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub könyvtárba..."
			echo $UHUBUILD_PATH/packages-${UHUBUILD_DISTR}/ub/${i}_ub.tar.gz ${i} |\
				xargs tar --exclude sources --one-file-system -czf
		fi
	fi
	greenecho "****************"	
	greenecho "*** Rendben. ***"	
	greenecho "****************"	
	#UB csomagolás kész
    
done


mv -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile/${i}_compiled.tar.gz \
	"$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/compile/${i}_${ver}-${rel}_compiled.tar.gz \
	2> /dev/null

mv -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install/${i}_installed.tar.gz \
	"$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/snapshot/install/${i}_${ver}-${rel}_installed.tar.gz \
	2> /dev/null

echo
echo A buildelés befejeződött.
echo

export UHUBUILD_CHROOTDIR=

[ `ls -1 "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/ | wc -l` = 0 ] || {
	yellowecho A következő ub csomagok utolsó fordítása hiba miatt megszakadt:
	yellowecho
	ls "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/
	      if [ -f "$UHUBUILD_PATH"/misc-${UHUBUILD_DISTR}/failed/"$i" ]; then
	      exit 2
	      fi
	exit 0
}
